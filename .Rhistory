tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "pct_votes",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
View(elections_2020_map)
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "candidate_rank",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "candidate",   # variable to be mapped
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "candidate_rank" > 50,   # variable to be mapped
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "candidate",   # variable to be mapped
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "candidatevotes",   # variable to be mapped
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red"),
col = "candidatevotes",   # variable to be mapped
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")) # variable to display in popup window
%>%
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "pct_votes",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "pct_votes",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
addPolygons();
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red","blue"),
col = "pct_votes",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red"),
col = "candidate",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate != "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("blue"),
col = "candidate",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
#  tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red"),
col = "candidate",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")) + # variable to display in popup window
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1);
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red"),
col = "candidate",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")) %>% # variable to display in popup window
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1);
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red"),
col = "candidate",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")) %>% # variable to display in popup window
filter(elections_2020_map, candidate == "DONALD J TRUMP" & candidate_rank == 1);
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate == "DONALD J TRUMP" & candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red"),
col = "candidate",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")) %>% # variable to display in popup window
filter(elections_2020_map, candidate == "DONALD J TRUMP" & candidate_rank == 1);
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red"),
col = "candidate_rank",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red", "blue"),
col = "candidate_rank",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red", "blue"),
col = "pct_votes",   # variable to be mapped
midpoint = 50,
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
col = "pct_votes",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Vote %:" = "pct_votes")) + # variable to display in popup window
tm_facets(by = "candidate") # create one map per selected candidate
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red", "blue"),
col = "pct_votes",   # variable to be mapped
midpoint = 50,
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red", "blue"),
col = "candidate",   # variable to be mapped
title = "Winner",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
# Chunk 1: setup
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
include = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE
)
# Chunk 2: qx.x
# code goes here
# Chunk 3: load packages
# Load all the packages you need here
# Don't write the install.packages() code here. Run that code in the console.
library(readxl)
library(readr)
library(tidyverse)
library(janitor)
library(sf)
library(tmap)
library(skimr)
library(jtools)
library(huxtable)
library(rmapshaper)
# Chunk 4: q1.1
elections <- read.csv(file = './countypres_2000-2020.csv');
# Chunk 5: q2.1
head(elections, n = 6L);
# Chunk 6: q2.2
year <- elections[, c("year")];
mode <- elections[, c("mode")];
year <- unique(year, incomparables = FALSE);
mode <- unique(mode, incomparables = FALSE);
# Chunk 7: q2.4
ncol(elections);
# Chunk 8: q2.5
nrow(elections);
# Chunk 9: q3.1
elections_2020 <- filter(elections, year == 2020);
# Chunk 10: q3.2
zero_votes <- filter(elections_2020, candidatevotes == 0);
counties <- zero_votes[, c("county_name")];
counties <- unique(counties, incomparables = FALSE);
nrow(table(counties));
zero_votes_candidates <- zero_votes[, c("candidate")];
zero_votes_candidates <- unique(zero_votes_candidates, incomparables = FALSE);
zero_votes_candidates;
# Chunk 11: q3.4
mode_state <- table(elections_2020$mode, elections_2020$state);
mode_state;
# Chunk 13: q4.1
# code goes here
elections_2020_state_totals <-
elections_2020 %>%
group_by(state_po) %>%
summarise(sum_votes_state = sum(candidatevotes, na.rm = TRUE), .groups = "drop");
elections_2020_state_totals <- unique(elections_2020_state_totals);
# Chunk 14: q4.2
# code goes here
official_state_votes <- read_excel('./state_votes.xlsx');
# Chunk 15: q4.3
# code goes here
elections_2020_state_comparison <- left_join(elections_2020_state_totals, official_state_votes, by = c("state_po" = "state_short"));
# Chunk 16: q4.4
# code goes here
percentageDifference <- (elections_2020_state_comparison$official_total_votes - elections_2020_state_comparison$sum_votes_state) / elections_2020_state_comparison$official_total_votes * 100;
min(percentageDifference);
max(percentageDifference);
mean(percentageDifference);
# Chunk 17: q5.1
# code goes here
table(elections_2020$candidate);
# Chunk 18: q5.2
elections_2020_clean <- elections_2020 %>%
group_by(county_fips) %>%
mutate(candidatevotes = ifelse(is.na(candidatevotes), 0, candidatevotes),
totalvotes = ifelse(is.na(totalvotes), sum(candidatevotes), totalvotes))
# Chunk 19: q5.3
# code goes here
elections_2020_clean <- elections_2020_clean %>%
group_by(state, state_po, county_name, county_fips, totalvotes, candidate, party) %>%
summarise(candidatevotes = sum(candidatevotes), .groups = "drop");
elections_2020_clean <- elections_2020_clean %>%
group_by(county_fips) %>%
summarise(candidate = candidate, party = party, state = state, state_po = state_po, county_name = county_name, candidatevotes = candidatevotes, totalvotes = totalvotes, pct_votes = (candidatevotes / totalvotes) * 100, candidate_rank = rank(desc(candidatevotes)), .groups = "drop") %>%
ungroup();
# Chunk 20: q5.4
# code goes here
min(elections_2020_clean$pct_votes) >= 0;
max(elections_2020_clean$pct_votes) <= 100;
# Chunk 22: q6.1
load("./county_shfl.RData")
# where `path` corresponds to where the county_shfl.RData file is located on your laptop.
# Chunk 23: q6.2
# code goes here
elections_2020_clean[elections_2020_clean$county_name == "MCDUFFIE",];
county_shfl[county_shfl$NAME == "McDuffie",];
# Chunk 24: q6.3
# code goes here
typeof(elections_2020_clean$county_fips);
typeof(county_shfl$GEOID);
# Chunk 25: q6.3 given
elections_2020_clean <- elections_2020_clean %>%
mutate(county_fips_clean = as.character(county_fips), #convert county_fips to a character string
county_fips_clean = ifelse(nchar(county_fips_clean) == 4,
paste0("0", county_fips_clean),
county_fips_clean)) #Add a leading zero when necessary: if there are only four characters to the FIPS code, it means that the leading 0 is missing
# Chunk 26: q6.4
# code goes here
length(unique(county_shfl$STATEFP));
# Chunk 27: q6.5 given
# code goes here
county_shfl_clean <- county_shfl %>%
filter(STATEFP != "02" & STATEFP != "15" & as.numeric(STATEFP) <= 56);
# Chunk 28: q6.5 given part 2
elections_2020_clean <- elections_2020_clean %>%
mutate(county_fips_clean = case_when(
county_fips_clean == "46113" ~ "46102",
state_po == "DC" ~ "11001",
TRUE ~ county_fips_clean))
# Chunk 29: q6.6
# code goes here
elections_2020_map <- left_join(county_shfl_clean, elections_2020_clean, by = c("GEOID" = "county_fips_clean"));
# Chunk 30: q6.7 map1 tmap
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate %in% c("DONALD J TRUMP", "JOSEPH R BIDEN JR")) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
col = "pct_votes",   # variable to be mapped
title = "% of votes",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Vote %:" = "pct_votes")) + # variable to display in popup window
tm_facets(by = "candidate") # create one map per selected candidate
# Chunk 31: q6.8 map2
# code goes here
tmap_mode("view") # we want an interactive map
elections_2020_map %>%
# only keep Trump and Biden
filter(candidate_rank == 1) %>%
tm_shape() +
tm_borders(col="white", lwd = 0.3) + # white and thin (line width) borders
tm_fill(
palette = c("red", "blue"),
col = "candidate",   # variable to be mapped
title = "Candidate",   # legend title
id = "county_name",   # information to display when mouse hovers over a departement
popup.vars = c("Winner:" = "candidate", "Vote %:" = "pct_votes")); # variable to display in popup window
# Chunk 32: q7.1
# code goes here
acs_soc_2019 <- read_csv("./ACSDP5Y2019.DP02-Data.csv");
acs_eco_2019 <- read_csv("./ACSDP5Y2019.DP03-Data.csv");
# Chunk 33: q7.2
# code goes here
ncol(acs_soc_2019);
ncol(acs_eco_2019);
# Chunk 34: q7.3
# code goes here
acs_soc_2019_clean <- acs_soc_2019 %>%
rename(pct_high_school = DP02_0062PE) %>%
summarise(NAME = NAME, GEO_ID = GEO_ID, pct_high_school = pct_high_school);
acs_eco_2019_clean <- acs_eco_2019 %>%
rename(mean_income = DP03_0063E, pct_const_maintenance_occ = DP03_0030PE) %>%
summarise(NAME = NAME, GEO_ID = GEO_ID, mean_income = mean_income, pct_const_maintenance_occ = pct_const_maintenance_occ);
# Chunk 35: q7.4
# code goes here
head(acs_soc_2019_clean, n = 5L);
head(acs_eco_2019_clean, n = 5L);
# Chunk 36: q7.6
# code goes here
acs_eco_2019_clean <- acs_eco_2019_clean[-c(1),];
acs_soc_2019_clean <- acs_soc_2019_clean[-c(1),];
# Chunk 37: q7.7
# code goes here
acs_2019_clean = left_join(acs_soc_2019_clean, acs_eco_2019_clean);
# Chunk 38: q7.8
# code goes here
typeof(acs_2019_clean$pct_const_maintenance_occ);
typeof(acs_2019_clean$mean_income);
typeof(acs_2019_clean$pct_high_school);
# Chunk 39: q7.9
# code goes here
acs_2019_clean <- acs_2019_clean %>%
mutate(pct_high_school = as.numeric(pct_high_school),
pct_const_maintenance_occ = as.numeric(pct_const_maintenance_occ),
mean_income = as.numeric(mean_income));
# Chunk 40: q7.10
# code goes here
acs_2019_clean[acs_2019_clean$NAME == "McDuffie County, Georgia",]$GEO_ID;
# Chunk 41: q7.11
# code goes here
acs_2019_clean <- acs_2019_clean %>%
summarise(NAME, GEO_ID, pct_high_school, pct_const_maintenance_occ, mean_income, county_fips_clean = substr(GEO_ID, 10, 14));
# Chunk 42: q7.12
# code goes here
elections_2020_covariates <- left_join(elections_2020_clean, acs_2019_clean);
# Chunk 43: q8.1
# code goes here
elections_2020_reg_trump <- elections_2020_covariates %>%
filter(candidate == "DONALD J TRUMP") %>%
summarize(state_po, county_name, county_fips_clean, pct_votes, pct_high_school, pct_const_maintenance_occ, mean_income) %>%
rename(pct_votes_trump = pct_votes);
# Chunk 44: q8.support
load("./elections_2020_reg_trump.RData")
# where `path` corresponds to where the elections_2020_reg_trump.RData file is located on your laptop.
# Chunk 45: q8.2
# code goes here
skim(elections_2020_reg_trump, mean_income, pct_high_school, pct_const_maintenance_occ)
